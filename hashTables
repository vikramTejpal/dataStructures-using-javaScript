<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      console.log("connected");
      charCount = (str) => {
        let obj = {};
        for (let i = 0; i < str.length; i++) {
          if (!obj[str[i]]) {
            obj[str[i]] = 1;
          } else {
            obj[str[i]]++;
          }
        }
        return obj;
      };

      //console.log(charCount("connected"));
      same = (num1, num2) => {
        //WAP called "same", which accepts two arrays.
        //The function should return true if every value
        //in the array has its's corrseponding value squared
        //in the second array. The frequency of values must be same.
        let obj = {};
        if (num1.length !== num2.length) {
          return false;
        }
        for (let i = 0; i < num1.length; i++) {
          if (!obj[num1[i]]) {
            obj[num1[i]] = 1;
          } else {
            obj[num1[i]]++;
          }
        }
        let obj1 = {};
        for (let i = 0; i < num2.length; i++) {
          if (!obj1[num2[i]]) {
            obj1[num2[i]] = 1;
          } else {
            obj1[num2[i]]++;
          }
        }
        for (let key in obj) {
          if (!obj1[key ** 2] || obj[key] !== obj1[key ** 2]) {
            return false;
          }
        }
        return true;
      };
      //console.log(same([1, 2, 3, 2, 5], [9, 1, 4, 4, 11]));

      validAnagram = (str1, str2) => {
        let obj1 = {};
        if (str1.length !== str2.length) {
          return false;
        }
        for (let i = 0; i < str1.length; i++) {
          if (!obj1[str1[i]]) {
            obj1[str1[i]] = 1;
          } else {
            obj1[str1[i]]++;
          }
        }
        let obj2 = {};
        for (let i = 0; i < str2.length; i++) {
          if (!obj2[str2[i]]) {
            obj2[str2[i]] = 1;
          } else {
            obj2[str2[i]]++;
          }
        }
        for (let key in obj1) {
          if (!obj2[key] || obj1[key] !== obj2[key]) {
            return false;
          }
        }
        return true;
      };
      //console.log(validAnagram("awesome", "awjsome"));

      sameFreq = (num1, num2) => {
        let obj1 = {};
        num1 = `${num1}`;
        num2 = `${num2}`;
        for (let i = 0; i < num1.length; i++) {
          if (!obj1[num1[i]]) {
            obj1[num1[i]] = 1;
          } else {
            obj1[num1[i]]++;
          }
        }
        let obj2 = {};
        for (let i = 0; i < num2.length; i++) {
          if (!obj2[num2[i]]) {
            obj2[num2[i]] = 1;
          } else {
            obj2[num2[i]]++;
          }
        }
        for (let key in obj1) {
          if (!obj2[key] || obj1[key] !== obj2[key]) {
            return false;
          }
        }
        return true;
      };
      //console.log(sameFreq(182, 281));

      function dups(n) {
        let arr = [...arguments];
        console.log(arr);
        let obj1 = {};
        for (let i = 0; i < arr.length; i++) {
          if (!obj1[arr[i]]) {
            obj1[arr[i]] = 1;
          } else {
            obj1[arr[i]]++;
          }
        }
        for (let key in obj1) {
          if (obj1[key] > 1) {
            return false;
          }
        }
        return true;
        //Using multiple pointer pattern
        let arr = [...arguments];
        let j = 0;
        let k = 1;
        arr = arr.sort((a, b) => a - b);
        console.log(arr);
        for (let i = 0; i < arr.length; i++) {
          if (arr[j] === arr[k]) {
            return false;
          }
          j++;
          k++;
        }
        return true;
      }
      console.log(dups(1, 2, 3, 4, 1));

      sumZero = (nums) => {
        //Using moving pointer technique
        let left = 0;
        let right = nums.length - 1;
        for (let i = 0; i < nums.length; i++) {
          let sum = nums[left] + nums[right];
          if (sum === 0 && left !== right) {
            return `${nums[left]} and ${nums[right]} sums to Zero`;
          }
          if (sum > 0) {
            right--;
          } else {
            left++;
          }
        }
        return `No such pair was found`;
      };
      //console.log(sumZero([-4, -3, -4, -8, 0, 1, 2]));
      countUniqueValue = (nums) => {
        //Using moving pointer pattern
        let i = 0;
        let j = 1;
        let count = 0;
        for (let k = 0; k < nums.length; k++) {
          if (nums[i] !== nums[j]) {
            count++;
          }
          i++;
          j++;
        }

        return count;
        let uniqs = [...new Set(nums)];
        return uniqs.length;
      };
      console.log(countUniqueValue([1, 1, 1, 1, 1, 3]));
    </script>
  </body>
</html>
