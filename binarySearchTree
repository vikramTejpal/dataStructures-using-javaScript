<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TREES</title>
</head>
<script>
    class Node {
        constructor(val) {
            this.val = val
            this.left = null
            this.right = null
        }
    }
    class Tree {
        constructor() {
            this.root = null
        }
        insert(val) {
            var newNode = new Node(val)
            if (!this.root) {
                this.root = newNode
                return this
            }
            let current = this.root
            while (true) {
                if (newNode.val < current.val) {
                    if (current.left === null) {
                        current.left = newNode
                        return this
                    } else {
                        current = current.left
                    }
                } else {
                    if (current.right === null) {
                        current.right = newNode
                        return this
                    } else {
                        current = current.right
                    }
                }
            }
        }

        find(val) {
            var current = this.root
            while (current) {
                //console.log(current)
                if (val < current.val) {
                    current = current.left
                } else if (val > current.val) {
                    current = current.right
                } else if (val === current.val) {
                    return current
                }
            }
            return false
        }
        remove(val) {}
        BFS() {
            let node = this.root,
                data = [],
                queue = []
            queue.push(node)
            while (queue.length) {
                node = queue.shift()
                data.push(node.value)
                if (node.left) queue.push(node.left)
                if (node.right) queue.push(node.right)
            }
            return data
        }
    };
    /*
                50
                
            25      75

        10   20    70   90
    */
    let tree = new Tree()
    tree.insert(50)
    tree.insert(25)
    tree.insert(75)
    tree.insert(10)
    tree.insert(10)
    tree.insert(30)
    tree.insert(70)
    tree.insert(90)
    console.log(tree.find(75))
    console.log(tree)
    console.log(tree.BFS())

    var sortColors = function (nums) {
        let left = 0,
            right = nums.length - 1
        for (let i = 0; i < nums.length && i <= right; i++) {
            if (nums[i] === 0) {
                let temp = nums[left]
                nums[left] = nums[i]
                nums[i] = temp
                left++
            } else if (nums[i] === 2) {
                let temp = nums[right]
                nums[right] = nums[i]
                nums[i] = temp
                right--
                i--
            } else {

            }
        }
        return nums
    };
    console.log(sortColors([2, 0, 2, 1, 1, 0]))

    var findDuplicate = function (nums) {

        let obj = {}
        for (let i = 0; i < nums.length; i++) {
            if (!obj[nums[i]]) {
                obj[nums[i]] = 1
            } else {
                return nums[i]
            }
        }


    };
</script>

<body>
</body>

</html>
